#-*- makefile -*-
#
# File: Makefile.halo
#
# Description: halo pipeline make rules
#

# The directory of this makefile
MAKEDIR = $(dir $(lastword $(MAKEFILE_LIST)))

# Makefile general includes
# It's OK to put these first as they don't define any dependencies (only variables and recipes)
include $(MAKEDIR)Makefile.ngsvars
include $(MAKEDIR)Makefile.general

# Output name
ifndef HALO_TARGET_PREFIX
HALO_TARGET_PREFIX=halo
endif

# Input label
MERGE_INPUT_SUFFIX=.trimmed.sync.sort.rg.bam
SAMPLE_TARGET_SUFFIX=.sort.merge.realign.recal.clip.bam
VCF_TARGET_SUFFIX=.sort.merge.raw.vcf

# Targets
# Using := rather than = for these speeds up make a lot.
# But for that to work these must be defined after including Makefile.ngsvars (where e.g. READ1_LABEL is defined)
FLOWCELL_TARGETS := $(subst $(READ1_LABEL).fastq.gz,$(MERGE_INPUT_SUFFIX),$(FASTQFILES))
SAMPLE_TARGETS := $(foreach s,$(SAMPLES),$(s)/$(s)$(SAMPLE_TARGET_SUFFIX))
# Raw vcf targets - these have to exist *before* realignment is run,
# otherwise the default realignment rule is used
VCF_TARGETS := $(foreach s,$(SAMPLES),$(s)/$(s)$(VCF_TARGET_SUFFIX))

# Picard targets
PICARD_DUPMETRICS_TARGETS ?= $(subst .recal.clip.bam,.dup_metrics,$(SAMPLE_TARGETS))
PICARD_HSMETRICS_TARGETS ?= $(subst .recal.clip.bam,.hs_metrics,$(SAMPLE_TARGETS)) $(subst .bam,.hs_metrics,$(FLOWCELL_TARGETS))
PICARD_INSERTMETRICS_TARGETS ?= $(subst .recal.clip.bam,.insert_metrics,$(SAMPLE_TARGETS)) $(subst .bam,.insert_metrics,$(FLOWCELL_TARGETS))
PICARD_ALIGNMETRICS_TARGETS ?= $(subst .recal.clip.bam,.align_metrics,$(SAMPLE_TARGETS)) $(subst .bam,.align_metrics,$(FLOWCELL_TARGETS))

# Set VariantEval options to stratify by sample
GATK_VARIANT_EVAL_OPTIONS=-ST Filter -ST Sample --doNotUseAllStandardModules --evalModule CompOverlap --evalModule CountVariants --evalModule TiTvVariantEvaluator

# See phony targets after include statements

# Batched SLURM submission:
#
# 1. partition target list into batch sized lists
#
# 2. submit each list independently, tracking the SLURM id
#
# 3. submit the merge target, with the tracked SLURM ids as
#    dependencies
#
ifndef HALO_BATCH_SIZE
HALO_BATCH_SIZE=8
endif
halo-sbatch:
	@echo Running halo-sbatch recipe: submit data to queue manager
	@echo All sample targets: $(SAMPLE_TARGETS)
	@echo All samples: $(SAMPLES)
	@$(eval NTARGETS=$(shell echo $(SAMPLES) | awk '{print NF}'))
	@i=0; sbatchcounter=0; SAMPLELIST=; JOBNAMES=""; for SMP in $(SAMPLES); do \
	let i=i+1; \
	SAMPLELIST="$$SAMPLELIST$$SMP "; \
	if [ $$(($$i % $(HALO_BATCH_SIZE))) == 0 ] || [ $$i == $(NTARGETS) ]; then  \
	let sbatchcounter=sbatchcounter+1; \
	$(MAKE) halo-$$sbatchcounter.sbatch SLURM_COMMAND="$(MAKE) -j $(SLURM_MAKE_J) $(SLURM_MAKE_OPTIONS) samples SAMPLES=\'$$SAMPLELIST\'" SLURM_OUT=halo-$$sbatchcounter.out SLURM_ERR=halo-$$sbatchcounter.err ;\
	$(MAKE) halo-settings SLURM_COMMAND="$(MAKE) -j $(SLURM_MAKE_J) $(SLURM_MAKE_OPTIONS) samples SAMPLES=\'$$SAMPLELIST\'" SLURM_OUT=halo-$$sbatchcounter.out SLURM_ERR=halo-$$sbatchcounter.err > halo-$$sbatchcounter.settings; \
	$(MAKE) -pn halo-$$sbatchcounter.sbatch SLURM_COMMAND="$(MAKE) -j $(SLURM_MAKE_J) $(SLURM_MAKE_OPTIONS) samples SAMPLES=\'$$SAMPLELIST\'" SLURM_OUT=halo-$$sbatchcounter.out SLURM_ERR=halo-$$sbatchcounter.err >> halo-$$sbatchcounter.settings; \
	JOBNAMES="$$JOBNAMES,halo-$$sbatchcounter"; \
	SAMPLELIST=; \
	fi \
	done ; 

# Add sbatch submission of entire pipeline with waitfor requirements
# based on the submitted jobs above. I have not figured out how to get
# the JOBIDS easily from slurm output though.

# JOBIDS=$(shell `jobinfo -n $$JOBNAMES -u $(SLURM_USER) | $(GREP) $(SLURM_ACCOUNT) | $(AWK) '{print $$1}' `); \

##############################
# bwa alignment
##############################
# Redefine bam recipe to get correct file suffixes
# See section after include statements

##############################
# Merge rule 
##############################
# See section after include statements

##############################
# 1. Raw genotypes
# For identification of realignment target regions
##############################
ifndef GATK_UNIFIEDGENOTYPER_RAW_OPTIONS
GATK_UNIFIEDGENOTYPER_RAW_OPTIONS=-stand_call_conf 30.0 -stand_emit_conf 10.0  --downsample_to_coverage 200 --output_mode EMIT_VARIANTS_ONLY -glm BOTH -nt $(GATK_THREADS) -R $(GATK_REF)
endif
ifneq ($(GATK_DBSNP),)
GATK_UNIFIEDGENOTYPER_RAW_OPTIONS+=--dbsnp $(GATK_DBSNP)
endif
ifneq ($(GATK_TARGET_REGIONS),)
GATK_UNIFIEDGENOTYPER_RAW_OPTIONS+=-L $(GATK_TARGET_REGIONS)
endif

%.raw.vcf: %.bam
	$(GATK_COMMAND) -T UnifiedGenotyper $(GATK_UNIFIEDGENOTYPER_RAW_OPTIONS) -I $< -o $@.tmp && mv $@.tmp $@  && mv $@.tmp.idx $@.idx

# 2. Realignment target creator - add dependency on raw.vcf for next step, otherwise default rule is run
%.intervals: %.bam %.raw.vcf
	$(GATK_COMMAND) -T RealignerTargetCreator $(GATK_REALIGN_TARGET_CREATOR_OPTIONS) -I $< -known $(word 2, $^) -o $@.tmp && mv $@.tmp $@

# 3. Indel realignment around known positions
%.realign.bam: %.bam %.intervals %.raw.vcf
	$(GATK_COMMAND) -T IndelRealigner $(GATK_INDELREALIGNER_OPTIONS) -I $< -known $(word 3, $^) -o $@.tmp --targetIntervals $(word 2, $^) && mv $@.tmp $@  && mv $@.tmp.bai $@.bai

# 4. Recalibration
# Default recipe

# 5. Clipping
# Default recipe, set options
ifndef GATK_CLIPREADS_OPTIONS
GATK_CLIPREADS_OPTIONS=--cyclesToTrim 1-5 --clipRepresentation SOFTCLIP_BASES -rf UnmappedRead -R $(GATK_REF)
endif

# 6. Generic genotyping
# Default recipe, modified options
ifndef GATK_UNIFIEDGENOTYPER_OPTIONS
GATK_UNIFIEDGENOTYPER_OPTIONS=-stand_call_conf 30.0 -stand_emit_conf 10.0  --downsample_to_coverage 200 --output_mode EMIT_VARIANTS_ONLY -glm BOTH -nt $(GATK_THREADS) -R $(GATK_REF) --dbsnp $(GATK_DBSNP)
endif
ifneq ($(GATK_TARGET_REGIONS),)
GATK_UNIFIEDGENOTYPER_OPTIONS+=-L $(GATK_TARGET_REGIONS)
endif
# Alternative recipe, not using the merged BAM file
$(HALO_TARGET_PREFIX).noMerge.vcf: $(SAMPLE_TARGETS)
	$(GATK_COMMAND) -T UnifiedGenotyper $(GATK_UNIFIEDGENOTYPER_OPTIONS) $(addprefix -I ,$^) -o $@.tmp && mv $@.tmp $@  && mv $@.tmp.idx $@.idx

# 7. Variant filtration - set specific options for Haloplex
# Default recipe, halo-specific options
ifndef GATK_VARIANTFILTRATION_OPTIONS
GATK_VARIANTFILTRATION_OPTIONS=--clusterWindowSize 10 --clusterSize 3 --filterExpression "MQ0 >= 4 && ((MQ0 / (1.0 * DP)) > 0.1)" --filterName "HARD_TO_VALIDATE" --filterExpression "DP < 10" --filterName "LowCoverage" --filterExpression "QUAL < 30.0" --filterName "VeryLowQual" --filterExpression "QUAL > 30.0 && QUAL < 50.0" --filterName "LowQual" --filterExpression "QD < 1.5" --filterName "LowQD"
endif

# 8. Variant evaluation
# Default recipe, halo-specific options
ifndef GATK_VARIANT_EVAL_OPTIONS
GATK_VARIANT_EVAL_OPTIONS=-ST Filter --doNotUseAllStandardModules --evalModule CompOverlap --evalModule CountVariants --evalModule TiTvVariantEvaluator --evalModule ValidationReport
endif

##################################################
# Precious 
##################################################
.PRECIOUS: %.bai %$(READ1_LABEL).trimmed.sync.fastq.gz %$(READ2_LABEL).trimmed.sync.fastq.gz %.vcf %.raw.vcf %.filtered.vcf %.sort.merge.realign.recal.clip.bam %.recal_data.grp %.post_recal_data.grp

# Clean
# Multiple rm commands are needed, as the argument list can become too long if all files are listed on the same line
clean:
	rm -f $(wildcard $(SAMPLE_PREFIX)*/*/*trimmed*)
	rm -f $(wildcard $(SAMPLE_PREFIX)*/*/*bam*)
	rm -f $(wildcard $(SAMPLE_PREFIX)*/*/*metrics)
	rm -f $(wildcard $(SAMPLE_PREFIX)*/*merge*)
	rm -f all.*

##############################
# settings
##############################
.PHONY: trimsync flowcells samples %.log halo all halo-settings halo-header

print-%:
	@echo '$*=$($*)'

halo-header:
	@echo -e "\nMakefile.halo options"
	@echo "====================="

halo-targets:
	@echo -e "\nhalo targets"
	@echo "---------------------"

print-SAMPLE_TARGETS:
	@echo -e '\nSAMPLE_TARGETS=$(SAMPLE_TARGETS)'

print-TRIMSYNC_TARGETS:
	@echo -e '\nTRIMSYNC_TARGETS=$(TRIMSYNC_TARGETS)'

print-FLOWCELL_TARGETS:
	@echo -e '\nFLOWCELL_TARGETS=$(FLOWCELL_TARGETS)'


halo-settings: halo-header print-HALO_TARGET_PREFIX print-HALO_BATCH_SIZE print-GATK_UNIFIEDGENOTYPER_RAW_OPTIONS halo-targets print-TRIMSYNC_TARGETS print-FLOWCELL_TARGETS print-SAMPLE_TARGETS general-settings ngsvars-settings sequenceprocessing-settings samtools-settings bwa-settings picard-settings gatk-settings 

##############################
# Include files
#
# These are and should be put last so that they may declare
# dependencies using the variables set above. For example,
# Makefile.picard sets dependencies using the various PICARD_*_TARGETS
# variables set above.
#
# Note that the included files use ifndef statements when setting
# variables to check if those alredy have been set. The included
# options should be the last resort.
#
##############################

# Makefile includes
include $(MAKEDIR)Makefile.sequenceprocessing
include $(MAKEDIR)Makefile.samtools
include $(MAKEDIR)Makefile.bwa
include $(MAKEDIR)Makefile.picard
include $(MAKEDIR)Makefile.gatk

# Target rules
flowcells: $(FLOWCELL_TARGETS)
samples: $(FLOWCELL_TARGETS) $(VCF_TARGETS) $(SAMPLE_TARGETS)

$(HALO_TARGET_PREFIX).bam: $(VCF_TARGETS) $(SAMPLE_TARGETS)
	@$(eval NTARGETS=$(shell echo $(SAMPLE_TARGETS) | awk '{print NF}'))
	@if [ $(NTARGETS) != 0 ]; then \
	$(PICARD_JAVA) $(PICARD_HOME)/MergeSamFiles.jar $(addprefix INPUT=,$(SAMPLE_TARGETS)) O=$@.tmp $(PICARD_OPTIONS) $(PICARD_MERGESAM_OPTIONS) && mv $@.tmp $@ && mv $@.tmp.bai $(@:.bam=).bai; \
	fi

halo: all

all: $(FLOWCELL_TARGETS) $(HALO_TARGET_PREFIX).filtered.eval_metrics metrics.txt


##############################
# Overridden recipes
##############################

# Only define bam rule - use pipe to avoid unnecessary sam file creation
%.trimmed.sync.bam: %$(READ1_LABEL).trimmed.sync.fastq.gz %$(READ2_LABEL).trimmed.sync.fastq.gz
	$(BWA) mem $(BWA_OPTIONS) $(BWA_REF) $^ | $(SAMTOOLS) view -Sbh - > $@.tmp && mv $@.tmp $@

# Add read group information
%.sort.rg.bam: %.sort.bam
	java -Xmx2g -jar $(PICARD_HOME)/AddOrReplaceReadGroups.jar INPUT=$< OUTPUT=$@.tmp SORT_ORDER=coordinate $(PICARD_OPTIONS_COMMON) \
	RGID=$(firstword $(subst ., ,$*)) RGLB=lib RGPL=ILLUMINA RGPU=$(subst $(SPACE_CHAR),_,$(wordlist 1,3,$(subst _, ,$(notdir $@)))) \
	RGSM=$(firstword $(subst /, ,$(firstword $(subst ., ,$*)))) CREATE_INDEX=true && mv $@.tmp $@; mv $@.tmp.bai $(@:.bam=).bai

# Merge flowcell BAM files to make sample BAM files
define create-halo-merge-bam-deps
$1/$1.sort.merge.bam: $(filter $1/%,$(FLOWCELL_TARGETS))
.SECONDARY: $1/$1.sort.merge.bam
endef

$(foreach s, $(SAMPLES), $(eval $(call create-halo-merge-bam-deps,$s)))

%.sort.merge.bam:
	$(PICARD_JAVA) $(PICARD_HOME)/MergeSamFiles.jar $(addprefix INPUT=,$^) O=$@.tmp $(PICARD_OPTIONS_COMMON) $(PICARD_MERGESAM_OPTIONS) && mv $@.tmp $@ && mv $@.tmp.bai $(@:.bam=).bai
